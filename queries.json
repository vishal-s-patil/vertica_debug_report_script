[
    {
        "qid": 1,
        "query_name": "long_running_queries",
        "query_description": "description",
        "query": "SELECT n.subcluster_name, s.statement_start, s.user_name, CASE WHEN (CURRENT_TIMESTAMP - s.statement_start) > INTERVAL '10 minutes' THEN 'FATAL' WHEN (CURRENT_TIMESTAMP - s.statement_start) > INTERVAL '5 minutes' THEN 'WARNING' ELSE 'NORMAL' END AS query_status FROM sessions as s join nodes as n on n.node_name = s.node_name WHERE 1=1 and s.statement_id IS NOT NULL and n.subcluster_name = '<subcluster_name>' ORDER BY s.statement_start;",
        "query_past": "select null;"
    },
    {
        "qid": 2,
        "query_name": "active_sessions",
        "query_description": "description",
        "query": "select n.subcluster_name, s.user_name, count(1) as cnt, CASE WHEN COUNT(1) > 100 THEN 'FATAL' WHEN COUNT(1) > 50 THEN 'WARNING' ELSE 'NORMAL' END AS status from sessions as s JOIN nodes AS n ON n.node_name = s.node_name WHERE 1=1 and n.subcluster_name = '<subcluster_name>' AND s.statement_id is NOT NULL group by n.subcluster_name, s.user_name ORDER BY cnt desc;",
        "query_past": "WITH ranked_sessions AS ( SELECT user_name, snapshot_time, COUNT(1) AS cnt, CASE WHEN COUNT(1) > 100 THEN 'FATAL' WHEN COUNT(1) > 50 THEN 'WARNING' ELSE 'NORMAL' END AS status, ROW_NUMBER() OVER ( PARTITION BY snapshot_time ORDER BY cnt DESC ) AS row_num FROM netstats.sessions_full WHERE 1=1 and snapshot_time >= (timestamp {issue_time} - INTERVAL '30 mins') and snapshot_time <= timestamp {issue_time} and statement_id is not null GROUP BY snapshot_time, user_name ), limited_snapshots AS ( SELECT snapshot_time, ROW_NUMBER() OVER ( ORDER BY snapshot_time ) AS snapshot_rank FROM ranked_sessions GROUP BY snapshot_time ORDER BY snapshot_time ) SELECT rs.snapshot_time, rs.user_name, rs.cnt, rs.status FROM ranked_sessions rs JOIN limited_snapshots ls ON rs.snapshot_time = ls.snapshot_time WHERE ls.snapshot_rank <= 3 AND rs.row_num <= 5 ORDER BY rs.snapshot_time, rs.cnt DESC;"
    },
    {
        "qid": 3,
        "query_name": "inactive_sessions",
        "query_description": "description",
        "query": "select n.subcluster_name, s.user_name, count(1) as cnt, CASE WHEN COUNT(1) > 100 THEN 'FATAL' WHEN COUNT(1) > 50 THEN 'WARNING' ELSE 'NORMAL' END AS status from sessions as s JOIN nodes AS n ON n.node_name = s.node_name WHERE 1=1 and n.subcluster_name = '<subcluster_name>' AND s.statement_id is NULL group by n.subcluster_name, s.user_name ORDER BY cnt desc;",
        "query_past": "WITH ranked_sessions AS ( SELECT user_name, snapshot_time, COUNT(1) AS cnt, CASE WHEN COUNT(1) > 100 THEN 'FATAL' WHEN COUNT(1) > 50 THEN 'WARNING' ELSE 'NORMAL' END AS status, ROW_NUMBER() OVER ( PARTITION BY snapshot_time ORDER BY cnt DESC ) AS row_num FROM netstats.sessions_full WHERE 1=1 and snapshot_time >= (timestamp {issue_time} - INTERVAL '30 mins') and snapshot_time <= timestamp {issue_time} and statement_id is null GROUP BY snapshot_time, user_name ), limited_snapshots AS ( SELECT snapshot_time, ROW_NUMBER() OVER ( ORDER BY snapshot_time ) AS snapshot_rank FROM ranked_sessions GROUP BY snapshot_time ORDER BY snapshot_time ) SELECT rs.snapshot_time, rs.user_name, rs.cnt, rs.status FROM ranked_sessions rs JOIN limited_snapshots ls ON rs.snapshot_time = ls.snapshot_time WHERE ls.snapshot_rank <= 3 AND rs.row_num <= 5 ORDER BY rs.snapshot_time, rs.cnt DESC;"
    },
    {
        "qid": 3,
        "query_name": "memory_errors",
        "query_description": "description",
        "query": "select n.subcluster_name, em.event_timestamp, em.user_name, em.message from error_messages as em JOIN nodes AS n ON n.node_name = em.node_name where 1=1 and em.event_timestamp >= (TIMESTAMP {'from_date_time'} {to_date_time} {'issue_time'} - INTERVAL '3 hour') and n.subcluster_name = '<subcluster_name>' and em.event_timestamp <= {'from_date_time'} {'to_date_time'} {'issue_time'} {user_name='user_name'} and em.message ilike '%memory%' ORDER BY event_timestamp limit 5;"
    },
    {
        "qid": 4,
        "query_name": "all_errors",
        "query_description": "description",
        "query": "select n.subcluster_name, em.event_timestamp, em.user_name, em.message from error_messages as em JOIN nodes AS n ON n.node_name = em.node_name where 1=1 and em.event_timestamp >= (TIMESTAMP {'from_date_time'} {to_date_time} {'issue_time'} - INTERVAL '3 hour') and em.event_timestamp <= {'from_date_time'} {'to_date_time'} {'issue_time'} and n.subcluster_name = '<subcluster_name>' ORDER BY event_timestamp limit 5;"
    },
    {
        "qid": 4,
        "query_name": "hourly_query_count_for_past_3_hours",
        "query_description": "hourly query count of top 5 users for past 3 hours",
        "query": "WITH ranked_queries AS ( SELECT n.subcluster_name, DATE_TRUNC('hour', qp.query_start::timestamp) AS date_trunc_hour, qp.user_name, COUNT(1) AS cnt, AVG(qp.query_duration_us) AS avg_query_duration_us, MIN(qp.query_duration_us) AS min_query_duration_us, MAX(qp.query_duration_us) AS max_query_duration_us, AVG(qp.processed_row_count) AS avg_processed_row_count, ROW_NUMBER() OVER ( PARTITION BY DATE_TRUNC('hour', qp.query_start::timestamp) ORDER BY COUNT(1) DESC ) AS rank_in_hour FROM netstats.query_profiles AS qp JOIN nodes AS n ON n.node_name = qp.node_name WHERE 1=1 {query_start>=from_date_time} {query_start<to_date_time} and n.subcluster_name = '<subcluster_name>' and qp.query_start >= DATE_TRUNC('hour', NOW()) - INTERVAL '3 hours' GROUP BY n.subcluster_name, date_trunc_hour, qp.user_name ) SELECT subcluster_name, date_trunc_hour, user_name, cnt, avg_query_duration_us, min_query_duration_us, max_query_duration_us, avg_processed_row_count FROM ranked_queries WHERE rank_in_hour <= 5 ORDER BY date_trunc_hour DESC, cnt DESC;"
    }
]