[
    {
        "qid": 1,
        "query_name": "long_running_queries",
        "query_description": "description",
        "query": "SELECT n.subcluster_name, s.statement_start, s.user_name, CASE WHEN (CURRENT_TIMESTAMP - s.statement_start) > INTERVAL '10 minutes' THEN 'FATAL' WHEN (CURRENT_TIMESTAMP - s.statement_start) > INTERVAL '5 minutes' THEN 'WARNING' ELSE 'NORMAL' END AS query_status FROM sessions as s join nodes as n on n.node_name = s.node_name WHERE 1=1 {status='issue_level'} {user_name='user_name'} and s.statement_id IS NOT NULL and n.subcluster_name = '<subcluster_name>' ORDER BY s.statement_start;",
        "query_past": "select null; todo: need to form or adjusted"
    },
    {
        "qid": 2,
        "query_name": "active_sessions",
        "query_description": "description",
        "query": "select n.subcluster_name, s.user_name, count(1) as cnt, CASE WHEN COUNT(1) > 100 THEN 'FATAL' WHEN COUNT(1) > 50 THEN 'WARNING' ELSE 'NORMAL' END AS status from sessions as s JOIN nodes AS n ON n.node_name = s.node_name WHERE 1=1 {status='issue_level'} {user_name='user_name'} and n.subcluster_name = '<subcluster_name>' AND s.statement_id is NOT NULL group by n.subcluster_name, s.user_name ORDER BY cnt desc;",
        "query_past": "WITH ranked_sessions AS ( SELECT user_name, snapshot_time, COUNT(1) AS cnt, CASE WHEN COUNT(1) > 100 THEN 'FATAL' WHEN COUNT(1) > 50 THEN 'WARNING' ELSE 'NORMAL' END AS status, ROW_NUMBER() OVER ( PARTITION BY snapshot_time ORDER BY cnt DESC ) AS row_num FROM netstats.sessions_full WHERE 1=1 {user_name='user_name'} and snapshot_time >= (timestamp {'issue_time'} - INTERVAL '{duration} hours') and snapshot_time <= timestamp {'issue_time'} and statement_id is not null GROUP BY snapshot_time, user_name ), limited_snapshots AS ( SELECT snapshot_time, ROW_NUMBER() OVER ( ORDER BY snapshot_time ) AS snapshot_rank FROM ranked_sessions GROUP BY snapshot_time ORDER BY snapshot_time ) SELECT rs.snapshot_time, rs.user_name, rs.cnt, rs.status FROM ranked_sessions rs JOIN limited_snapshots ls ON rs.snapshot_time = ls.snapshot_time WHERE ls.snapshot_rank <= {snapshots} AND rs.row_num <= {user_limit} {status='issue_level'} ORDER BY rs.snapshot_time, rs.cnt DESC;"
    },
    {
        "qid": 3,
        "query_name": "inactive_sessions",
        "query_description": "description",
        "query": "select n.subcluster_name, s.user_name, count(1) as cnt, CASE WHEN COUNT(1) > 100 THEN 'FATAL' WHEN COUNT(1) > 50 THEN 'WARNING' ELSE 'NORMAL' END AS status from sessions as s JOIN nodes AS n ON n.node_name = s.node_name WHERE 1=1 {status='issue_level'} {user_name='user_name'} and n.subcluster_name = '<subcluster_name>' AND s.statement_id is NULL group by n.subcluster_name, s.user_name ORDER BY cnt desc;",
        "query_past": "WITH ranked_sessions AS ( SELECT user_name, snapshot_time, COUNT(1) AS cnt, CASE WHEN COUNT(1) > 100 THEN 'FATAL' WHEN COUNT(1) > 50 THEN 'WARNING' ELSE 'NORMAL' END AS status, ROW_NUMBER() OVER ( PARTITION BY snapshot_time ORDER BY cnt DESC ) AS row_num FROM netstats.sessions_full WHERE 1=1 {user_name='user_name'} and snapshot_time >= (timestamp {'issue_time'} - INTERVAL '{duration} hours') and snapshot_time <= timestamp {'issue_time'} and statement_id is null GROUP BY snapshot_time, user_name ), limited_snapshots AS ( SELECT snapshot_time, ROW_NUMBER() OVER ( ORDER BY snapshot_time ) AS snapshot_rank FROM ranked_sessions GROUP BY snapshot_time ORDER BY snapshot_time ) SELECT rs.snapshot_time, rs.user_name, rs.cnt, rs.status FROM ranked_sessions rs JOIN limited_snapshots ls ON rs.snapshot_time = ls.snapshot_time WHERE ls.snapshot_rank <= {snapshots} AND rs.row_num <= {user_limit} {status='issue_level'} ORDER BY rs.snapshot_time, rs.cnt DESC;"
    },
    {
        "qid": 3,
        "query_name": "error_messages",
        "query_description": "description",
        "query": "select n.subcluster_name, em.event_timestamp, em.user_name, SUBSTRING(em.message, 1, 50) from error_messages as em JOIN nodes AS n ON n.node_name = em.node_name where 1 = 1 { user_name = 'user_name' } and em.event_timestamp >= ( TIMESTAMP { 'from_date_time' } { to_date_time } { 'issue_time' } - INTERVAL '{duration} hour' ) and n.subcluster_name = '<subcluster_name>' and em.event_timestamp <= { 'from_date_time' } { 'to_date_time' } { 'issue_time' } and em.message ilike '%{err_type}%' ORDER BY event_timestamp limit { num_items };"
    },
    {
        "qid": 0,
        "query_name": "queue_status",
        "query_description": "description",
        "query": "SELECT n.subcluster_name, rq.pool_name, COUNT(1) AS cnt, CASE WHEN COUNT(1) > 100 THEN 'FATAL' WHEN COUNT(1) > 50 THEN 'WARNING' ELSE 'NORMAL' END AS status FROM resource_queues AS rq JOIN nodes AS n ON n.node_name = rq.node_name WHERE 1=1 {status='issue_level'} {pool_name='pool_name'} and n.subcluster_name = '<subcluster_name>' GROUP BY n.subcluster_name, rq.pool_name ORDER BY cnt desc;",
        "query_past": "WITH ranked_sessions AS ( SELECT pool_name, snapshot_time, COUNT(1) AS cnt, CASE WHEN COUNT(1) > 100 THEN 'FATAL' WHEN COUNT(1) > 50 THEN 'WARNING' ELSE 'NORMAL' END AS status, ROW_NUMBER() OVER ( PARTITION BY snapshot_time ORDER BY cnt DESC ) AS row_num FROM netstats.resource_queues_full WHERE 1 = 1 { pool_name = 'pool_name' } and snapshot_time >= (timestamp { 'issue_time' } - INTERVAL '{duration} hours') and snapshot_time <= timestamp { 'issue_time' } GROUP BY snapshot_time, pool_name ), limited_snapshots AS ( SELECT snapshot_time, ROW_NUMBER() OVER ( ORDER BY snapshot_time ) AS snapshot_rank FROM ranked_sessions GROUP BY snapshot_time ORDER BY snapshot_time ) SELECT rs.snapshot_time, rs.pool_name, rs.cnt, rs.status FROM ranked_sessions rs JOIN limited_snapshots ls ON rs.snapshot_time = ls.snapshot_time WHERE ls.snapshot_rank <= {snapshots} AND rs.row_num <= {user_limit} {status='issue_level'} ORDER BY rs.snapshot_time, rs.cnt DESC;"
    },
    {
        "qid": 0,
        "query_name": "sessions_exceeding_limit",
        "query_description": "description",
        "query": "SELECT n.subcluster_name, date_trunc({granularity},event_timestamp) as date_trunc, count(1) from error_messages as em JOIN nodes AS n ON n.node_name = em.node_name WHERE 1=1 {user_name='user_name'} and event_timestamp >= (timestamp {'issue_time'} - INTERVAL '{duration} hour') and event_timestamp <= timestamp {'issue_time'} and n.subcluster_name = '<subcluster_name>' and message like '%1000 sessions%' group by n.subcluster_name, date_trunc order by date_trunc desc;"
    },
    {
        "qid": 0,
        "query_name": "hourly_query_count_for_past_3_hours",
        "query_description": "description",
        "query": "WITH ranked_queries AS ( SELECT n.subcluster_name, DATE_TRUNC({granularity}, qp.query_start::timestamp) AS date_trunc, qp.user_name, COUNT(1) AS cnt, AVG(qp.query_duration_us) AS avg_query_duration_us, MIN(qp.query_duration_us) AS min_query_duration_us, MAX(qp.query_duration_us) AS max_query_duration_us, AVG(qp.processed_row_count) AS avg_processed_row_count, ROW_NUMBER() OVER ( PARTITION BY DATE_TRUNC({granularity}, qp.query_start::timestamp) ORDER BY COUNT(1) DESC ) AS rank_in_hour FROM netstats.query_profiles AS qp JOIN nodes AS n ON n.node_name = qp.node_name WHERE 1=1 {user_name='user_name'} and query_start>=(timestamp {'issue_time'} - interval '{duration} hour') and query_start<= {'issue_time'} and n.subcluster_name = '<subcluster_name>' and qp.query_start >= DATE_TRUNC({granularity}, query_start) - INTERVAL '{duration} hour' GROUP BY n.subcluster_name, date_trunc, qp.user_name ) SELECT subcluster_name, date_trunc, user_name, cnt, avg_query_duration_us, min_query_duration_us, max_query_duration_us, avg_processed_row_count FROM ranked_queries WHERE rank_in_hour <= 5 ORDER BY date_trunc DESC, cnt DESC;"
    },
    {
        "qid": 0,
        "query_name": "resource_pool_status",
        "query_description": "description",
        "query": "select node_name,memory_size_kb,general_memory_borrowed_kb,max_memory_size_kb from resource_pool_status where 1=1 {pool_name='pool_name'}; ",
        "query_past": "select null;"
    },
    {
        "qid": 1,
        "query_name": "delete_vectors_count",
        "query_description": "description",
        "query": "select created_time, schema_name, projection_name, sum(total_row_cnt) row_count, sum(deleted_row_cnt) deleted_rows, sum(delete_vector_cnt) dv_count, n.subcluster_name from netstats.storage_containers as sc JOIN nodes AS n ON n.node_name = sc.node_name where 1=1 {projection_name ILIKE 'table_name'} and created_time=(select max(created_time) from netstats.storage_containers) group by created_time, schema_name,projection_name,n.subcluster_name order by {order_by} dv_count desc limit {num_items};"
    },
    {
        "qid": 1,
        "query_name": "deleted_row_count",
        "query_description": "description",
        "query": "select created_time, schema_name, projection_name, sum(total_row_cnt) row_count, sum(deleted_row_cnt) deleted_rows, sum(delete_vector_cnt) dv_count, n.subcluster_name from netstats.storage_containers as sc JOIN nodes AS n ON n.node_name = sc.node_name where 1=1 {projection_name ILIKE 'table_name'} and created_time=(select max(created_time) from netstats.storage_containers) group by created_time, schema_name,projection_name,n.subcluster_name order by deleted_rows desc limit {num_items};"
    },
    {
        "qid": 1,
        "query_name": "catalog_size_in_memory",
        "query_description": "description",
        "query": "select node_name,memory_size_kb,general_memory_borrowed_kb,max_memory_size_kb from resource_pool_Status where 1=1 and pool_name='metadata' order by memory_size_kb desc, general_memory_borrowed_kb desc;"
    }
]